1.for循环
	- 语法：
		for( 初始化表达式; 条件表达式 ; 更新表达式 ){
			语句...
		}
	- for循环执行流程：
		1.执行初始化表达式，初始化变量（初始化只会执行一次）
		2.执行条件表达式，根据结果判定是否执行循环体。
			- 如果结果为true，则执行循环。
			 - 循环执行完毕在执行更新表达式，更新变量。
			 - 然后重复执行第二步
			- 如果结果为false，则直接停止循环。

	- 如果for循环中的三个表达式都行不写：
		for(;;){}
		- 这样for循环就变成了一个死循环
		
2.break和continue
	- break可以用在循环语句和switch语句中，可以用来退出循环语句或switch。
	- 当break执行以后，将会立即退出当前最近的循环，break以后的代码将不再执行	
	
	- continue可以用在循环语句，可以用来立即结束当次循环。
	- 当循环中执行到continue以后，当次循环立即结束，跳到下一次循环开始。
	
	- 也可以为循环语句来指定一个标签：
		label:循环语句
		- 然后使用break或continue时，可以后边跟着这个标签，则语句会对指定标签的语句生效。
		- 例子：
			break label;

3.对象
	- 在JS中一共有六种数据类型：
		String、Number、Boolean、Null、Undefined、Object
	- Object是JS中的引用数据类型，它也称为复合数据类型，
		在一个对象中可以保存多个属性。
	- JS中的对象一共分成三种：
		1.内建对象
			- ES标准中内置的对象
		2.宿主对象
			- 浏览器为我们提供的对象
		3.自定义对象
			- 开发人员自己创建的对象
	- 自定义对象：
		1.创建对象：
			1.创建对象的方式一：
				调用对象的构造函数(constructor)创建对象
			var obj = new Object();
			
		2.对象属性的增删改查的操作	
			- 向对象中增加属性
			- 语法：
				①对象.属性名 = 属性值
				②对象["属性名"] = 属性值
					- 注意，这种方式属性名必须加上引号，如果不加引号则里面的内容会被当成变量解析
				- 例子：
					obj.name = "孙悟空";
					obj["age"] = 18;
					
					
			- 读取对象中的属性：
				语法：
					①对象.属性名
					②对象["属性名"]
				例子：
					obj.name
					obj["age"]
					
			- 修改对象中的属性		
				- 语法：
					①对象.属性名 = 属性值
					②对象["属性名"] = 属性值
					
			- 删除对象中的属性
				- 语法：
					delete 对象.属性名
					
	- 基本数据类型和引用数据类型：
		1.内存分为两种结构：栈内存和堆内存。
		2.栈内存用来保存变量，堆内存用来保存对象。
		3.当创建一个基本数据类型的变量时，变量会保存到栈内存中，同时变量会直接保存基本数据类型的值，
			当修改一个基本数据类型的值时，由于每一个变量都是独立的，不会影响其他的变量。
		4.当创建一个引用类型（对象）的变量时，变量会保存到栈内存中，对象会保存到堆内存，
			而在栈内存的变量中保存的是堆内存的地址，当我们对变量进行操作时，实际上是在操作堆内存中的对象。
			可以有多个变量同时指向一个对象，这样当我们修改一个变量时，其他的变量也会受到影响！
			
			
			
			
			
			
			
			
			
			
			
			
			
			