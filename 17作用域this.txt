1.作用域链
	- 当执行一个函数时，在函数中使用变量时，它会现在自身的作用域中查找变量
		如果自身没有，则向上一级的函数作用域寻找，如果还没有则继续寻找,
		如果所有的上级的函数作用域中都没有，则向全局作用域中寻找，全局作用域在没有则报错。
	- 我们这些函数作用域和全局作用域就构成一条作用域的链。
	- 闭包：
		- 内部的函数可以访问到外部函数声明的变量，但是外部函数不能访问内部函数中的变量，这就形成了一个闭包。
		- 特点：
			当外部函数执行完毕以后，使用内部函数依然可以访问到外部函数中的变量。
		
2.垃圾回收（GC）
	- 当一个对象没有任何的变量对其引用时，这种对象我们就认为是垃圾，需要清理出内存。
	- 在JS中拥有自动的垃圾处理的机制，这些垃圾对象会自动被JS引擎所回收，不需要我们手动处理。
	- 我们只需要将不再使用的对象和变量之间的引用断开即可。	
	
3.创建对象的方式：
	- 工厂方法
		- 例子：
			function createPerson(name , age){
				//新创建一个对象
				var obj = new Object();
				//向对象中添加属性和方法
				obj.name = name;
				obj.age = age;
				obj.sayHello = function(){};
				
				//将对象返回
				return obj;
			}
			
			var per = createPerson("swk",18);
			var per2 = createPerson("zbj",28);
			
			- 使用工厂方法创建的对象全都是Object类型的对象，我们无法识别不同的对象的类型
			- 我们希望创建一个人的对象，使用Person() 创建一个狗的对象，使用Dog()
	
	- 构造函数（constructor）
		- 其实构造函数就是一个普通的一个函数，但是我们的构造函数习惯首字母大写。
		- 构造函数通过new关键字来调用
		- 定义一个构造函数：
			function MyClass(name , age){
				this.name = name;
				this.age = age;
				this.sayHello = function(){};
			}
			
			var mc = new MyClass();
			
		- 构造函数的执行的过程：
			1.创建一个新的对象
			2.以这个新对象作为this，然后调用函数
			3.将新建的对象作为返回值返回
			
		- 每一个对象都有一个隐含的属性constructor，用来保存它自己的构造函数。
		- 可以通过instanceof来判断一个对象是否属于某个构造函数的实例
		- 语法：对象 instanceof 构造函数，如果是则返回true，否则返回false
			由于Object是所有对象的祖先，所以任何对象和Object进行instanceof运算都会返回true
			
	- this关键字
		- 浏览器在调用一个函数时，它会默认传递进一个参数，这个参数叫this，代表的是执行函数的上下文对象。
		- this在不同的情况下代表不同的对象：
			1.当函数作为一个方法调用时，谁调用的函数this就是谁。
				例子：obj.fun() --> this就是obj
			2.当作为一个函数调用时，this永远都是window
				例子：fun() ---> this就是window （window.fun()）
			3.当作为一个构造函数调用时，this就是新创建的那个对象
				例子：var per = new Person() --> this --> per
			
			
			
		
		
		
	
	