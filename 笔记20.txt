1.Function
	- call()
	- apply()
		- 这两个方法作用类似，都是需要通过函数对象来调用，当一个函数对象调用这两个方法，
			函数就会立即被调用，他们和普通的函数调用的区别是，这两个方法可以指定this对象。
		- 用法：
			函数对象.call(this对象,实参1,实参2,实参N)
			函数对象.apply(this对象,[实参的数组])
		- this到底是谁？
			1.以函数形式调用时，this永远是window
			2.以方法的形式调用时，this就是调用方法的那个对象
			3.以构造函数调用时，this就是新创建的对象
			4.使用call和apply调用时，this就是指定的那个对象
	- arguments
		- 每个函数在执行时，浏览器都会默认传递两个隐藏的参数
			一个是执行的上下文对象：this
			一个是封装实参的对象：arguments
		- arguments是类数组的对象，我们调用函数时所有的实参都会在arguments中保存。
			我们可以通过arguments[索引]来获取实参。
		- arguments中还封装了一个属性callee，这个属性指向的是当前函数本身。	

2.包装类
	- 在JS中为我们提供了String() Boolean() Number()三个包装类
		通过他们可以将一个基本数据类型转换为一个对象。
	- 转换方式
		var obj = new String(基本数据类型);
		var obj2 = new Number(基本数据类型);
		var obj3 = new Boolean(基本数据类型);
		
	- 但是我们一般会去将基本数据类型转换为对象，因为转换以后在去作比较时会比较是对象的内存地址，而不是值。
	- 当我们去调用一个基本数据类型的方法或属性时，浏览器会默认将其临时转换为对象然后在去调用，调用完成在转换回去。

	- String（字符串相关的方法）
		- 在底层字符串是当成一个字符数组来处理的，所以字符串的操作方式和数组类似
		- length ：属性，可以用来获取一个字符串的长度
		- concat(): 可以将多个字符串拼接成一个
		- charAt(): 可以获取一个字符串中指定索引的字符
		- charCodeAt() : 可以获取一个字符串中指定索引的字符的编码
		- String.fromCharCode() : 可以根据字符编码返回字符内容
		- indexOf(): 在字符串中查找指定的字符串，它会返回第一个查找到的索引，如果没有符合要求则返回-1
				可以指定一个第二个参数，来指定开始查找的位置
		- lastIndexOf() : 和indexOf类似，只不过它是从后往前找。
		- slice() : 可以用来截取一个字符串中的指定内容，语法：字符串对象.slice(开始索引,结束索引)
		- subString() ：和slice类似，只不过它不能接受负值，如果结束索引小于开始索引，则会自动调整位置
		- split()：可以根据指定的内容将字符串拆分为一个字符串数组 split(""); 可以接受一个字符串或正则表达式作为参数
		- match()：可以根据正则表达式从字符串中将符合条件的内容提取出来
		- search()：可以根据正则表达式或者是字符串从字符串中查找指定的内容的索引，如果找到了则返回索引，如果没有则返回-1
		- replace()：可以使用新内容替换字符串中的指定内容。replace("替换的内容","新的内容");	
		
3.RegExp（正则表达式）
	- 正则表达式用来指定一个规则，计算机可以根据这个规则来检查字符串是否符合规则，
		或者从一个字符串中将符合规则的内容提取出来。
	- 创建正则表达式的对象：
		1. var reg = new RegExp("正则字符串","匹配模式");
		2. var reg = /正则表达式/匹配模式
		
	- 匹配模式：
		常用的模式主要有两个：
			i:忽略大小写匹配
			g:全局匹配模式
			
	- 方法：
		test() --> 这个方法可以用来检查一个字符串是否符合正则表达式的规则
					如果符合则返回true，如果不符合则返回false
		用法：正则对象.test(字符串);

	- 语法：
		| ：或
		[] : 或
		[^ ] : 除了
		^ : 以。。。开始
		$ : 以。。。结尾
		\w : 数字和字母
		\W ：除了数字和字母
		\s : 空格
		\S : 除了空格
		\d : 数字
		\D ：除了数字
		\b : 单词边界
		\B : 除了单词边界
		
		量词：
			{n} 出现n次
			{n,m} 出现n-m次
			{n,} 最少n次
			* 任意次
			+ 1次到多次
			? 0次到1次
			











