1.JS中常用的三个输出语句。
	- 在浏览器窗口中弹出一个警告框
		alert("提示的内容");
		
	- 在页面中输出一个内容
		document.write("输出的内容");	
		
	- 在控制台中输出一个内容
		console.log("输出的内容");
		
2.JS中的基本语法
	- 单行注释：
		//注释的内容
	- 多行注释：
		/*
			注释内容
		*/
	- JS中严格区分大小写。
	- JS中会自动忽略多余的空格和换行。
	- JS的每条语句必须以分号结尾。
	
3.JS的编写的位置：
	1.可以编写到标签的指定的属性当中
		例子：
			<button onclick="alert('')">我是一个按钮</button>
			<a href="javascript:alert('');">超链接</a>
		- 缺点：
			- 这样写我们称为结构与行为耦合，不方便对代码的维护，不推荐使用。
			
	2.可以将代码编写到script标签中
		例子：
			<script type="text/javascript">
				alert("");
			</script>
			
	3.可以将代码编写到一个外部的js文件中，然后通过script标签来引入外部js文件（推荐方式）
		例子：
			<script type="text/javascript" src="外部文件的路径"></script>
		
		- 特点：
			- 使用这种方式，将结构和行为完全分离，方便维护
			- 写到外部文件中，我们的JS代码可以在不同的页面中复用
			- 将js编写到一个公共的文件中的，浏览器可以使用缓存，提高用户的访问速度
			
4.变量和字面量
	- 字面量，就是各种各样的值，比如数字、字符串、布尔值、null、undefined。
		字面量都是不可变的。
	- 变量，变量可以用来保存字面量，可以任意改变变量的值。
		我们一般都是使用变量来保存字面量，而不是直接使用字面量。
	- 变量：
		- 变量的声明
		- JS是一个弱类型的语言，声明变量时不需要指定变量的类型，只需要使用一个var一个关键字。
			var a;
			var b;
			var c,d,e,f;

		- 为变量赋值
		- JS是一个动态类型的语言，可以为变量赋任意类型的值，在使用变量的过程中可以任意的修改变量中数据类型
			a = "Abc";
			b = 123;
			c = true;
			a = 456;
			b = false;
			
		- 声明和赋值同时进行
			var g = 123;
			var h=456,i="hello",j=true;
			
5.标识符
	- 所谓的标识符就是我们程序中，所有的我们可以自主命名的内容。
	- 比如：变量名、函数名、对象的属性名等等
	- 规则：
		1.标识符必须以字母、_、$开头
		2.标识符中可以使用字母、数字、_、$开头
		3.标识符不能是关键字和保留字
		4.命名时我们一般采用驼峰命名法
			- 首字母小写，每个单词的首字母大写
			
6.数据类型
	- JS一共有六种数据类型：
		String
			- 表示字符串
			- 字符串类型数据使用引号引起来
		Number
			- 表示1、2 、3等等这些数字的
			- 特殊的数字：
				Infinity 正无穷
				-Infinity 负无穷
				NaN 非数字
			- 在JS中小数（浮点数）和整数都是Number类型的
			- 使用JS做浮点数计算时不精确，所以涉及到对计算精度有要求就不要再JS中计算了	
		Boolean
			- 布尔值
			- 只有两个值：true和false
			- 用来表示逻辑上真和假的，一般使用布尔值做一些逻辑判断的操作
		Null
			- 表示一个为空的对象
			- 使用typeof检查null值，会返回object
			- 值只有一个：null
			
		Undefined
			- 表示一个没有初始化的变量
			- 值只有一个：undefined
		Object
	- 六种数据类型中，除了Object其余的都是基本数据类型，Object是引用数据类型。	
	
7.类型转换
	- 基本数据类型之间的转换
	- 转换为String
		- 两种方式：
			1.toSring()
				- 调用被转换变量的toString()方法，它可以将目标变量转换为字符串并返回
				- 例子：
					var a = 123;
					a = a.toString();
				- 注意:这种方式不适用于Undefined和Null类型的数据，
					使用这两个数据类型调用toString()会报错。
			2.String()
				- 将被转换的内容作为参数传递到String()函数中，可以将目标转换为字符串并返回
				- 例子：
					var a = 123;
					a = String(a);
				- 这种方式适用于Null和Undefined，当转换其他的数据类型时，它会使用toString()，
					当转换null值，直接将其转换为"null",
					undefined，直接将其转换为"undefined"
	
	- 转换为Number
		- 三种方式：
			1.Number()
				- 直接将转换的内容作为参数传递给Number()即可将其转换为数值返回。
				- 例子 
					var str = "123px"
					str = Number(str);
				- 情况：
					字符串：
						- 数值型字符串：转换为正常的数字
						- 非数值型的字符串：转换为NaN
						- 空串和只有空格的串: 0
					布尔值：
						- true转换为1
						- false转换为0
					null值：
						- 转换为0
					undefined值
						- 转换为NaN
						
			2.parseInt()
				- 使用parseInt()可以将一个字符串转换为一个数字
				- 它和Number()类似，但是他会保留字符串中整数部分，而忽略非法的部分。
				- 使用parseInt()时，可以指定一个第二个参数，来指定数据的进制
				- 例子：
					var a = "070";
					a = parseInt(a,10);
			
			3.parseFloat()
				- parseFloat()和parseInt()一致，只不过他可以处理有效的小数。
					而parseInt()只能处理整数
	
	- 转换为Boolean
		- 使用Boolean()
		- 直接将要转换的数据，作为参数传递给Boolean()即可。
		- 例子：
			var a = 1;
			a = Boolean(a);
		- 情况：
			String：
				1.空串"" --> false
				2.非空串 --> true
			Number
				1.0 --> false
				2.NaN --> false
				3.其余数字 --> true
			Undefined
				undefined ---> false
			Null
				null --> false
			对象：
				非空对象 --> true
				
8.运算符（操作符）
	- 可以使用运算符，对数据进行各种操作		
	- 算数运算符：
		+
			- 加法运算，会对+两侧的变量进行做求和操作
		-
			- 会对-两侧值进行减法运算
		*
			- 会对*两侧的值进行乘法运算
		/
			- 会对/两侧的值进行除法运算
		%
			- 会对%两侧的值进行取模运算
	- 特点：
		除了加法，其余的算数元素符，都会将两侧数据转换为Number类型在进行运算
		做加法运算时，如果两个值中有字符串，则另一个值也会转换为字符串，并做拼串的操作，
			所以我们可以通过为一个变量+""的形式将一个值转换为字符串，其内部元素也是调用的String();
		
			
			
			
			
			
			
			
			
			
		
	