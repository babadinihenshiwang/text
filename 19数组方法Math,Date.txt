1.数组
	- 方法：
		- push() --> 向数组的末尾添加一个新的元素，返回新的数组长度
		- pop() --> 删除数组末尾的一个元素，并返回删除的元素
		- unshift() --> 向数组的最前边添加一个新的元素，并返回新的数组的长度
		- shift() --> 删除数组中第一个元素，并返回删除的元素
		- slice() --> 截取数组中指定的元素
			- 用法：
				该方法需要两个参数：
					第一个参数：开始截取位置的索引
					第二个参数：截取结束位置的索引，这个参数可以是一个负值，如果是负值则从数组的后边开始计算
						第二个参数可以省略，如果省略会截取开始位置以后所有的内容
			- 注意：
				slice()方法不会改变原数组，而是将截取的数组作为返回值返回
				
		- splice() --> 删除数组中的指定元素，或添加新的元素
			- 用法：
				该方法至少需要两个参数：
					第一个参数：开始删除位置的索引
					第二个参数：删除的个数
					剩下的参数：
						数量不限，可以将一些新的元素添加到数组中
			- 注意：splice()会修改原数组，并且会将删除元素作为返回值返回

		- concat() --> 用来连接多个数组
			- 用法：
				数组对象.concat(元素,数组,数组);
				不会改变原数组，而是返回一个新的数组
				
		- reverse() --> 反转数组
			- 用法：
				数组对象.reverse()
				调用完了以后会直接修改原数组，将原数组中的元素位置颠倒。
				
		- join() --> 将数组中元素转换为一个字符串
			- 用法：
				数组对象.join("连接符")
				它会将数组中所有的元素拼接为一个字符串，并使用指定的连接符连接，如果不指定连接符，则默认使用,
				
		- sort() --> 对数组中的内容进行重新排序
			- 用法：
				数组对象.sort(回调函数)
				 - sort会影响原数组，会改变原数组的顺序，如果不传递参数，则数组中元素会按照字符编码进行排序。
				 - 我们可以传递进一个回调函数来指定排序规则，
					回调函数只需要两个形参，浏览器会分别使用数组中的元素作为实参来调用函数，
						并且根据函数的返回值，来决定是否交换两个元素的位置，
							如果返回值大于0则交换位置，如果返回值小于等于0则不交换位置
				 - 升序的回调函数
					function(a,b){
						return a-b;
					}
				- 降序的回调函数
					function(a,b){
						return b-a;
					}
			
2.Math
	- Math这个对象不是一个构造函数，不能用来创建对象
	- Math中封装了很多数学计算相关的属性和方法。
	- 常用：
		PI --> 圆周率 Math.PI
		abs() --> 绝对值 Math.abs()
		ceil() --> 上取整 Math.ceil()
		floor() --> 向下取整 Math.floor();
		round() --> 四舍五入取整
		random() --> 生成一个0-1之间的随机数
		max()
		min() --> 取多个值中的最大值或最小值
		sqrt() --> 开方
		pow(x,y) --> 取x的y次幂
		
	- 生成一个指定范围的随机数
	- 生成一个x-y的随机数
			var num = Math.round(Math.random()*(y-x)+x);

3.Date
	- Date用来表示一个时间
	- 创建一个Date对象
		var dt = new Date() //会创建一个时间的对象，这时间就是这行代码执行那一刻
		var dt2 = new Date("10/12/2015 07:08:55") //根据时间的字符串创建一个指定的时间
			- 时间格式：月/日/年 小时:分钟:秒
	- 方法：
		getDate() --> 返回今天是几号 
		getDay() --> 返回今天是周几（0-6），0周日 1周一 6周六
		getMonth() --> 获取当前的月份（0-11） 0一月，11十二月 
		getFullYear() --> 获取年份
		
		getHours() --> 获取小时 
		getMinutes() --> 获取分钟
		getSeconds() ---> 获取秒钟
		getMilliseconds() --> 获取毫秒  1秒 = 1000毫秒 
		getTime() --> 获取当前时间的时间戳
			- 所谓的时间戳指的是从1970年1月1日0时0分0秒到现在的时间所花费毫秒数
			
		toLocaleString() --> 将时间转换为本地格式

		Date.now() ---> 获取代码执行时的时间戳，用它可以用来计算程序执行的时间。	

			

