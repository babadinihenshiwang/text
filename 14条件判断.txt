1.typeof运算符
	- typeof运算符可以用来去检查一个变量的数据类型
	- 语法：typeof 变量
	- 如果是数字类型，返回number
		如果是字符串，返回string
		如果是布尔值，返回boolean
		如果是undefined，则返回undefined
		其他返回 object
	- typeof运算符返回的结果的类型都是string

2.流程控制
	- 程序默认是按照从上到下的顺序执行的，所谓的流程控制，
		指的就是来通过流程控制语句，来改变程序的执行顺序，
			或者可以使一些代码循环多次执行。
	- 代码块
		- 在JS中可以使用{}为代码进行分组，同一个{}中的代码我们称为一个代码块
		- 例子：
			{
				alert("hello");
				console.log("hello too");
			}
		- 代码块不用再写分号了，JS中的代码块只有分组的作用，不会起其他作用。
			不会和其他的代码块中的代码隔离！
			
	- 流程控制语句		
		- 条件判断语句：
			if语句
			if...else...
			语法一：
				if(条件表达式){
					语句...
				}
				- 当if中的语句执行之前，它会先对条件表达式进行判断，
					如果判断结果为true，则会执行语句，如果条件判断为false，则不执行语句。
				- 当条件表达式的执行结果是一个非布尔值时，它会将其转换为布尔值然后在判断。	
				
			语法二：
				if(条件表达式){
					语句...
				}else{
					语句...
				}
				- 当if...else...语句执行之前，它会先执行条件表达式，并根据执行的结果来判断，
					如果结果为true，则执行if后的语句
					如果结果为false，则执行else后的语句
					
			语法三：
				if(条件表达式){
					语句...
				}else if(条件表达式){
					语句...
				}else{
					语句...
				}
				
				- 这个语句执行时，会依次的从上到下去检查if中的条件表达式，
					如果结果为true，则执行当前if后的语句，如果结果为false，则继续向下检查，
						直到检查到true为止，如果if中的条件表达式全都是false，则执行else。
				- if...else if...else...这个语法中只会有一个语句执行，一旦语句执行了，其他的语句将不再进行判断		
				
		- 条件分支语句（switch语句）
			- switch的作用和if类似，这哥俩可以互相替换，使用时根据自己的喜好选择。
			- 语法：
				switch(条件表达式){
					case 条件表达式:
						语句...;
						break;
					case 条件表达式:
						语句...;
						break;
					case 条件表达式:
						语句...;
						break;
					default:
						语句...;
						break;		
				}
			- 当执行switch时，它会使每一个case中的条件表达式的执行结果分别和switch后的条件表达式的结果做全等操作，
				如果比较结果为true，则执行case后的所有的代码，如果所有的case都不满足则执行default。
			- break关键字可以在循环语句和switch语句中使用，当使用break以后，程序会立即退出循环或终止switch语句。	
			
	循环语句：
		- 循环语句可以使一段代码多次重复执行。
		- 我们有三种循环
			while循环
				- 语法：
					while(条件表达式){
						语句...
					}
					
					- while循环中的语句会执行多次，在每次执行前，会先判断条件表达式是否成立
						如果表达式成立，则执行，如果不成立则终止循环
					- 可以使用break关键字来退出循环。	
					
			do...while循环
				- 语法：
					do{
						语句...
					}while(条件表达式)
				- do...while和while循环类似，只不过do...while会先执行语句，在进行判断，
					使用do...while可以确保语句至少会执行一次。
				- 实际开发中使用while相对要多一些。	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	