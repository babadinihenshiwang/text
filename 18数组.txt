1.原型（prototype）
	- 每一个函数在创建完成之后，都会默认添加一个prototype属性，
		这个属性指向的是一个对象，这个对象就是我们所说的原型对象。
		
	- 当函数作为构造函数使用时，每次使用该函数创建的对象中，
		都会有一个隐含的属性去指向prototype属性对应的对象。	
			也就是说所有的通过相同的构造函数创建的对象，都有一个共同的原型对象。
			
	- 当我们去调用一个对象的方法或读取属性时，它会先去对象自身中寻找，
		如果自身中没有，则向原型中寻找，如果原型中也没有，则上原型的原型中寻找，
			以此类推，当找到Object对象的原型时，便不再寻找，因为Object对象的原型没有原型。
			
	- Object对象的原型没有原型对象，它是我们所有的对象的祖先。
	
	- 当前对象的原型，原型的原型，等等等这一系列的原型对象就构成我们当前对象的原型链，
		当从对象中读取属性或调用方法时，会沿着原型链查找，如果找到则返回并停止查找，如果没找到则返回undefined。
		
	- 一般情况下同一个类型的对象他们的原型对象只有一个，
		所以我们可以将一类对象中共有的属性和方法统一设置到原型对象中
			这样所有的该类的实例都可以访问这些属性并使用这些方法。
			
	例子：
		function Person(name , age){
			this.name = name;
			this.age = age;
		}
		
		Person.prototype.sayHello = function(){};
		
	- 原型的设置：
		语法：
			- 读取原型：
				构造函数.prototype
				对象.__proto__  //这个不是所有的浏览器都支持的，它也不是ES标准中定义的内容。
				
			- 向原型对象中添加属性或方法
				构造函数.prototype.属性名 = 属性值
				构造函数.prototype.方法名 = function(){}
				
			- 直接修改原型对象
				构造函数.prototype = 新的对象
				
2.数组（Array）		
	- 数组也是一个对象，主要用来保存元素。
	- 数组实际上和普通对象类似，只不过数组使用索引作为属性名
	- 索引（index），是从0开始的整数值。
	- 我们开发时经常会使用数组来保存一组数据，数组比普通对象存取效率要高一些。
	- 数组的操作：
		- 创建数组：
			第一种：var arr = new Array();
			第二种: var arr = [];
			
		- 向数组中添加元素
			arr[index] = 值;
			
		- 获取数组的长度
			数组对象.length
			- 数组的length属性实际上是数组最大的索引值+1
			- 可以通过如下方式，向数组的最后边添加一个元素
				数组对象[数组对象.length] = 值;
				
		- 还可以在数组创建时执行添加元素
			var arr = [元素1,元素2,元素3,元素4,元素5];
			
		- 在JS中数组的长度基本上是没有限制的，可以放任意多的元素，
			而且数组中的元素没有类型的闲置，可以是一个基本数据类型，也可以是一个对象、函数
				甚至可以是一个数组，当数组中放的还是数组时，这个数组我们称为一个二维数组。
				
		- 遍历数组：
			- 遍历数组就是将数组中的所有的元素都获取出来。
			- 遍历数组我们主要使用for循环来遍历：
				- 例子：
					for(var i=0 ; i<数组.length ; i++ ){
						console.log(数组[i]);
					}
					
			- ES5标准中还提供一个forEach()函数专门用来遍历数组的，但是注意IE8及以下的浏览器不支持该方法。
			- forEach()这个方法由数组对象调用，要遍历那个对象就调用哪个对象的forEach，forEach中需要一个函数作为参数
				这个函数由我们来定义，但是由浏览器去调用，这中函数称为回调函数，
					数组中每有一个元素，回调函数就会被调用一次，每次浏览器都会通过函数的参数的形式将信息返回。
					第一个参数：表示当前遍历到的元素的值
					第二个参数：表示当前遍历到的元素的索引
					第三个参数：表示数组对象本身
					
			- 例子：
				数组对象.forEach(function(value , index , obj){
				
				});
			
		
		
		
		
		
		
		
		
		
		
		
		